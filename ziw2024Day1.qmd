---
title: "ZIW 2024 Day 1"
format: pdf
author: JPB
---

## ZIW 2024 Day 1

### Intro to R, RStudio, and Quarto

Welcome to the ZIW Day 1 content. The following 4 items will be covered in today's session:

1.  Introduction and General Course Structure

    1.  Professor Introduction

    2.  Student Introduction

    3.  Group Formation

    4.  Daily "Plan"

        1.  Morning sessions

            1.  Lecture for 45 minutes

            2.  Break for 15 minutes

            3.  Repeat

        2.  Afternoon Sessions (Mainly Lab Orientation after 1st hour of direction)

            1.  Lecture for 45 minutes - If needed, otherwise, "lab" sessions

            2.  Break for 15 minutes

            3.  Repeat

    5.  Overall Course Plan

        1.  Day 1: R and R "Mechanics"

        2.  Day 2: Downloading Financial Data and Statistical Testing

        3.  Day 3: Downloading Financial Data and Performance Visualization

        4.  Day 4: Risk Management Metrics

        5.  Day 5: Group Project (Investment Recommendation) Presentations

            1.  You will present your recommendations for a 10 stock portfolio (the "active" portion), along with appropriate index(es) - no more than 3 - (the "passive" portion) for an institutional investor deciding to allocation \$100,000,000 to the portfolio.

            2.  Your recommendations will describe why you chose the holdings, and relevant indexes.

            3.  Your presentation will include various firm-specific and market-level return, risk, and correlation characteristics

            4.  Your report will also include various financial risk management metrics, e.g. VaR, ES, etc... for the individual holdings and for the portfolio

2.  History of R

3.  Downloading R and RStudio

    1.  Local Installation/R/RStudio

    2.  Setting-Up Environment/RStudio IDE

    3.  Cloud Access (post.cloud)

    4.  Packages

    5.  Creating Projects

4.  Basics of R Coding

    1.  The most important items and sources for most errors

        1.  R is Case Specific, e.g. the variable caseSpecific is different than CaseSpecific, and casespecific

        2.  The assignment operator "\<-" is essentially the same as "=" but MUCH different than "=="

    2.  Three important data types

        1.  Numeric

        2.  Character

        3.  Logical

    3.  Basic data structure

        1.  Vectors

        2.  Matrices

        3.  Lists

        4.  Data Frames

        5.  Tidy

    4.  Basic Operations

        1.  Basic Mathematical Operators

        2.  The "c()" operator

5.  Packages

    1.  "install.packages("package name")

    2.  "library(package name)

6.  Tidy Framework

    1.  Structure or Tidy Data Sets

    2.  Packages

        1.  tidyverse

        2.  tidyfinance

        3.  tidyquant

        4.  ggplot2

7.  Quarto

    1.  Based on RMarkdown

    2.  Simpler/Visual Editor

    3.  Overall Strutcure

        1.  YAML

        2.  Text

        3.  Code "chunks"

        4.  Rendering/Knitting

8.  Time for "HANDS-ON" coding

    1.  Create a Quarto Document that contains text and code to:

        1.  Introduce your group members and group name

        2.  Describe which 10-30 stocks, plus 1-5 indexes you will choose for the class project

    2.  Print and Submit

------------------------------------------------------------------------

\newpage

------------------------------------------------------------------------

**Downloading R and RStudio**

What's the easiest way to download R and RStudio for a local (your desktop/laptop) installation? Simply visit the following sites and follow the step-by-step instructions for your operating system.

For R: Visit the *R Project for Statistical Computing (*<https://www.r-project.org/>) or the *Comprehensive R Archive Network (*<https://cran.r-project.org/>). Download and install R for your operating system.

For RStudio: Visit *posit (*<https://posit.co/>) to download RStudio. FYI - RStudio changed its name to "Posit" to better incorporate R, Python, and other frameworks in the "data workflow" process. Download and install RStudio for your operating system.

We will go through a couple of different examples of how to "customize" your RStudio environment, pane positions, background colors, etc...

**Cloud Access**

An alternative to having a local installation of R and Rstudio is to access *posit.cloud (*<https://posit.cloud/>).

**Projects**

Without a doubt, one of the most powerful features of RStudio is its ability to contain everything associated with a specific task into a *project*. A project is nothing other than a "pointer" for RStudio that tells it where to look for data, script files, output, etc, for a specific set of tasks, which we will call projects. The easiest way to create a "project" is to use *File-\>New Project*, and then follow the prompts.

------------------------------------------------------------------------

\newpage

------------------------------------------------------------------------

**Basics of R Coding**

R code is executed as nothing other than a series of instructions that tell R what to do. For instance, the code `x <- 5` assigns the value of 5 to the variable 'x'. So, if you wanted to create two variables, x and y, and add them together, you would enter the following into the Console:

`x <- 5`

`y <- 2`

`z <- x + y`

and then to print the value, use

`print(z).`

BTW, to "invoke" the instructions in the console, enter the following keystroke pair: Ctrl-Enter.

You can also enter the following code "chunk" to see how it works:

```{r}
#| label: basicCodeEx1

x <- 5
y <- 2
z <- x + y

print(z)
```

Notice what happened in the environment pane....

Usually, one combines a series of instructions into a R "script" file, e.g. File-\>New File-\>R Script, and saves the file with the extension ".R" or ".r" Instructions can be run in sequence one-by-one or in "batches" by highlighting the lines of code one wishes to execute, and then entering "Ctrl-Enter" or selecting the lines of code desired, and then selecting the "Run" command at the top of the menu bar. Either way works. Many simply "test" their code line-by-line using "Ctrl-Enter" to make sure all is good, before setting things up to run a "batch" of lines.

**Basic Data Types**

R has multiple data types, but the three you will probably reference the most when performing operations on financial relevant tasks are:

1.  Numeric,
2.  Character, and
3.  Logical

Numeric variables are simply those that contain numeric values, e.g. 2, or 20.7. Numeric variables are not "special" in any specific perspective, but they require attention when performing operations. One of the operations you will probably perform the most on numeric variables is mathematical operations.

Character variables, or as some call them - strings - are variables whose values contain textual-type data. For example, `x <- "a"` assigns a character value, e.g. "a", to the variable "x." Character variables are powerful in R because they can contain traditional characters used in speech, e.g. `y <- "thisIsAcharacter"` as well as numeric values transformed to be represented as characters, e.g. `z <- "50.3"` Character variables are quite versatile, but caution must be exercised when using them. Character variables do not have numeric values *per se*, which means they cannot be added or subtracted, but they can be combined with the "c()" operator, which we will visit later.

The final basic data type used in R is the Logical variable. Logical variables are those that traditionally have a value of "0" or "1" to denote "FALSE" or "TRUE." R actually reserves "FALSE" and "TRUE" as logical values, and hence, they cannot be used for variable values. What does that mean? Do not use "TRUE" or "FALSE" as variable values - unless you are referring to their logical uses.

------------------------------------------------------------------------

**Basic Data Structures**

In addition to there being three basic data types in R, there also are four (with a caveat 5th) different data structures. The first data structure, on which almost all others are based, is a "vector." Vectors in R are essentially any (Nx1) or (1xN) combination of values - including a single variable value, e.g. a 1x1 vector. The interesting aspect about vectors in R is that they can be used in arithmetic operations, and they can be combined to form matrices - if all elements are numeric - or data frames if some elements have numeric and character values - as well as lists, which allow for substantial subsetting of variables with different datatypes into a single data structure.

As indicated, matrices are data structures that contain rows and columns of numeric data. One can always determine the dimensions of a matrix by using the "dim()" function. Matrices are useful in R because they can also be operated on by arithmetic and matrix operations. The main issue with matrices is that they can only contain numeric data. To get around that limitation, data frames are a potential alternative, but the next data structure to be presented is a "list."

Lists in R allow one to not only combine numeric and character variables, but one where you can combine vectors, matrices, and data frames as elements. This would be nice, for instance, if you have an employee data base that allows you to assign an employee number, and within that employee number you have a data frame that includes address and other contact information as an element, and then another element could be a matrix with various salary-based data.

Data frames in R are rows and columns of data, where each variable can contain different data types. Columns and rows can be named when desired. The caveat to my reference to there being 4 data structures is that a "tidy data frame" is a special structure that we will focus on mainly in this class. Essentially, one can consider a tidy data structure to be similar to a spreadsheet structure, e.g. columns are variables, and rows are observation numbers. The cells are values at the intersection.

------------------------------------------------------------------------

**Basic Operations**

R performs a multitude of basic mathematical operations, e.g. addition, subtraction, multiplication, division, etc.

An example of an addition sequence was provided earlier, but is found again in the following code chunk.

```{r}
#| label: additionEx1

x <- 5
y <- 2
z <- x + y

print(z)

```

An example of a subtraction sequence is found below:

```{r}
#| label: subtractionEx1

x <- 5
y <- 2
z <- x - y

print(z)

```

Notice what happened in the environmental pane after running that code chunk.

An example of a multiplication operation is shown in the following:

```{r}
#| label: multiplactionEx1

x <- 5
y <- 2
z <- x * y

print(z)

```

Finally, an example of a division operation is as follows:

```{r}
#| label: divisionEx1

x <- 5
y <- 2
z <- x / y

print(z)

```

One of the most poweful operators in the R language is the "c()" operator. Some call it the "concatenator," or "combiner." I just call it the "c" operator, which does nothing other than combine or concatenate multiple variables into one. For instance, if you have the following code chunk...

```{r}
#| label: cOperatorEx1

x <- 5
y <- 2
z <- c(x,y)

print(z)

```

Notice what happened. The two "atomic" vectors" x and y are now combined into a new vector z, that has 1 row and 2 columns of values.

You can also "combine" two character variables, as in the following code chunk.

```{r}
#| label: cChrEx1

x <- "The cat jumped"
y <- "over the hat."
z <- c(x,y)

print(z)
```

Notice, that technically, the new "z" variable is as previously, a vector with 2 elements.

Finally, one can combine "objects," like vectors, as you can see in the following code chunk.

```{r}
#| label: vecCombEx1

x <- c(1,2)
y <- c(3,4)
z <- c(x,y)

print(z)

```

By the way, this is not the same as performing a "string" operation, e.g. "substr()" etc....

------------------------------------------------------------------------

**Packages**

For those of you who are familiar with computer programming, many tasks are usually pre-configured and ready to go as "packages" or "libraries." R uses the name "packages" to install and load code that helps one be more efficient and effective in their analyses. Since the data structure of interest in this class is of the "tidy" sort, we will make use of two "tidy" oriented packages, *tidyverse*, and *tidyquant*.

Since you may yet to have load those packages, use the "install.packages()" function to have them installed on your system:

`install.packages("tidyverse","tidyquant")`

Now, to be able to use the functions within those packages, use the "library()" function to access the power built into each package. By the way, if packages are built on tools and functionality from other packages (termed "dependencies), the dependent packages are also loaded as needed.

`library(tidyverse, tidyquant)`

Anytime you need to access functions to make your life easier, load the requisite packages using the "library()" function.

------------------------------------------------------------------------

**Quarto**

Quarto is an update on the previously used tool "RMarkdown," which allows you to incorporate text (as what you are reading presently), as well as code, which are segregated in "code chunks" as you have seen previously. We will make substantial use of Quarto in this course. Think of it as being the tool you would use at your place of work to submit an analytical report for your supervisor.

There are three main components of any Quarto document: 1) YAML header, 2) text, and 3) code chunks. We have already referenced the "text" and "code chunks" aspects, now it's time for a brief - and I mean brief - introduction to the YAML header. For instance, the YAML header for this document indicates the following:

\`---

title: "ZIW 2024 Day 1"

format: pdf

author: JPB

---\`

The first line is self-explanatory, it is the title of this particular Quarto document. The second line instructs Quarto to generate a specific file format in its output, and the final line is nothing other than an indication of the author. There are numerous other formats one can use (see quarto.org for the multitude of options). We will focus on pdf file formats in this class.

One creates a Quarto document just like any other file creation, e.g. with "File-\>New File-\>Quarto Document," and then selects the pre-specified options. Quarto file extensions are ".qmd" and one invokes, or renders" Quarto document instructions using the "Render" button on the secondary ribbon. Note, depending on your system, Quarto may ask to install and use the package "knitr" so don't worry if it does.

Ok, that's it for Day 1. Let's get our hands dirty on some coding....

------------------------------------------------------------------------

\newpage

**Day 1 "Task"**

For Day 1, create a Quarto pdf document, which will probably be 100% textual, that does the following:

1.  Introduces your group name and provides an introduction and summary of your group members
2.  Provides a description of the 10 individual stocks and 2-3 indexes you will use for the course project
